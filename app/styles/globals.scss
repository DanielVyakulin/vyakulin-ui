@use 'sass:list';
@use 'variables' as *;

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  text-decoration: none;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
  scroll-behavior: smooth;
}

// Base mixins
@mixin flex($direction: row) {
  display: flex;
  flex-direction: $direction;
}

@mixin flex-center {
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

@mixin icon-base($size: 1em) {
  width: $size;
  height: $size;
}

@mixin transition-base {
  transition: all 0.3s ease;
}

@mixin outline-base($color, $width: $outline-width, $offset: $outline-offset, $style: solid) {
  outline: $width $style $color;
  outline-offset: $offset;
}

// Typography mixin
@mixin text-style($size, $line-height, $weight) {
  font-size: $size;
  line-height: $line-height;
  font-weight: $weight;
}

// Text styles
@each $type, $props in (
  h1: ($font-size-heading-1, $line-height-heading-1, $font-weight-bold),
  h2: ($font-size-heading-2, $line-height-heading-2, $font-weight-semibold),
  h3: ($font-size-heading-3, $line-height-heading-3, $font-weight-medium),
  p: ($font-size-paragraph, $line-height-paragraph, $font-weight-regular),
  sm: ($font-size-small, $line-height-small, $font-weight-regular),
  btn: ($font-size-button, $line-height-button, $font-weight-semibold)
) {
  .t-#{$type} {
    @include text-style(list.nth($props, 1), list.nth($props, 2), list.nth($props, 3));
  }
}

// Interactive elements base styles
%interactive-base {
  @include flex-center;
  cursor: pointer;
}

// Button base
.btn {
  @extend %interactive-base;
  border-radius: $vem;
}

// Mixin for SVG icons
@mixin svg-style($color) {
  svg {
    @include icon-base;
    path {
      fill: $color;
    }
  }
}

// Link mixins
@mixin link-style($color, $hover-color) {
  @extend %interactive-base;
  color: $color;
  @include svg-style($color);

  &:hover {
    color: $hover-color;
    @include svg-style($hover-color);
  }
}

@mixin link-bg-style($color, $text-color, $hover-color, $hover-text-color) {
  @extend %interactive-base;
  color: $text-color;
  background-color: $color;
  @include svg-style($text-color);

  &:hover {
    color: $hover-text-color;
    background-color: $hover-color;
    @include svg-style($hover-text-color);
  }
}

// Button mixins
@mixin button-style($color, $text-color, $hover-color, $hover-text-color) {
  @extend .btn;
  background-color: $color;
  color: $text-color;
  @include svg-style($text-color);

  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
    @include svg-style($hover-text-color);
  }
}

@mixin outline-button-style($color, $text-color, $hover-color, $hover-text-color) {
  @extend .btn;
  background-color: transparent;
  color: $text-color;
  @include outline-base($color);
  @include svg-style($text-color);

  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
    @include outline-base($hover-color);
    @include svg-style($hover-text-color);
  }
}

// Generate interactive element styles
$colors: (
  wh: ($wh, $bl, $wh-hover, $bl-hover),
  wh-ac: ($wh, $bl, $ac, $bl),
  bl: ($bl, $wh, $bl-hover, $wh-hover),
  bl-ac: ($bl, $wh, $ac, $bl),
  ac: ($ac, $bl, $ac-hover, $bl-hover),
  wh-hover: ($wh-hover, $bl-hover, $wh, $bl),
  bl-hover: ($bl-hover, $wh-hover, $bl, $wh),
  ac-hover: ($ac-hover, $bl-hover, $ac, $bl)
);

@each $name, $values in $colors {
  // Link styles
  .link-#{$name} {
    @include link-style(list.nth($values, 1), list.nth($values, 3));
  }
  
  // Link background styles
  .link-bg-#{$name} {
    @include link-bg-style(list.nth($values, 1), list.nth($values, 2), list.nth($values, 3), list.nth($values, 4));
  }
  
  // Button styles
  .btn-#{$name} {
    @include button-style(list.nth($values, 1), list.nth($values, 2), list.nth($values, 3), list.nth($values, 4));
  }
  
  // Outline button styles
  .btn-outline-#{$name} {
    @include outline-button-style(list.nth($values, 1), list.nth($values, 1), list.nth($values, 1), list.nth($values, 2));
  }
}

// Input styles
.text-input {
  @include flex-center;
  padding: $vem * 2 $vem * 2 $vem;
  border-radius: $vem;
}

@mixin text-input-base {
  @extend .text-input;
  width: 100%;
  position: relative;
  outline: none;
  border: none;

  &::placeholder {
    color: transparent;
  }
}

@mixin text-input-style($color, $text-color, $hover-color, $hover-text-color) {
  @include text-input-base;
  background-color: $color;
  color: $text-color;

  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
  }

  &:focus {
    background-color: $ac;
    color: $bl;
  }
}

@mixin outline-text-input-style($color, $text-color, $hover-color, $hover-text-color) {
  @include text-input-base;
  background-color: transparent;
  color: $text-color;
  @include outline-base($color, $outline-width);

  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
    @include outline-base($hover-color);
  }

  &:focus {
    background-color: $ac;
    color: $bl;
    @include outline-base($ac);
  }
}

@mixin line-text-input-style($color, $text-color, $hover-color, $hover-text-color) {
  @include text-input-base;
  background-color: transparent;
  color: $text-color;
  border-bottom: 1px solid $color;
  padding: $vem !important;

  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
    border-bottom: 1px solid $hover-color;
  }

  &:focus {
    background-color: $ac;
    color: $bl;
    border-bottom: 1px solid $ac;
  }
}

// Input container and label
.input-container {
  position: relative;
  width: 100%;
  margin-top: $vem * 3;

  input {
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    font-weight: inherit;
  }
}

.input-label {
  position: absolute;
  left: $vem;
  top: 50%;
  transform: translateY(-50%);
  color: inherit;
  pointer-events: none;
  @include transition-base;
}

// Input label states mixin
@mixin input-label-states($color, $hover-color, $focus-color, $filled-color) {
  & ~ .input-label {
    color: $color;
  }

  &:hover ~ .input-label {
    color: $hover-color;
  }

  &:focus ~ .input-label {
    left: -$vem;
    top: -$vem * 3;
    color: $focus-color;
  }

  &:not(:placeholder-shown):not(:focus) ~ .input-label {
    left: -$vem;
    top: -$vem * 3;
    color: $filled-color;
  }
}

// Input styles generation
@each $name, $values in (
  wh: ($wh, $bl, $wh-hover, $bl-hover),
  bl: ($bl, $wh, $bl-hover, $wh-hover)
) {
  .input-#{$name} {
    @include text-input-style(list.nth($values, 1), list.nth($values, 2), list.nth($values, 3), list.nth($values, 4));
    @include input-label-states(list.nth($values, 2), list.nth($values, 4), $ac, list.nth($values, 1));
  }
  
  .input-outline-#{$name} {
    @include outline-text-input-style(list.nth($values, 1), list.nth($values, 1), list.nth($values, 1), list.nth($values, 2));
    @include input-label-states(list.nth($values, 1), list.nth($values, 2), $ac, list.nth($values, 1));
  }

  .input-line-#{$name} {
    @include line-text-input-style(list.nth($values, 1), list.nth($values, 1), list.nth($values, 1), list.nth($values, 2));
    @include input-label-states(list.nth($values, 1), list.nth($values, 2), $ac, list.nth($values, 1));
  }
}

body {
  margin-top: $vem * 20;
  padding: 0 $media-width;
  display: flex;
  flex-direction: column;
}

.anchor {
  scroll-margin-top: $vem * 20;
}

// Utility classes
.ch { @include flex(row); }
.cv { @include flex(column); }

// Generate spacing classes
@each $type, $property in (
  gap: gap,
  ph: (padding-left, padding-right),
  pv: (padding-top, padding-bottom)
) {
  @for $i from 1 through 12 {
    .#{$type}-#{$i} {
      @if type-of($property) == list {
        @each $prop in $property {
          #{$prop}: $vem * $i;
        }
      } @else {
        #{$property}: $vem * $i;
      }
    }
  }
}

.breadcrumb {
  align-items: center;
}

.snip {
  background-color: $bl;
  border: 1px solid $wh;
  border-radius: $vem * 2;
  min-width: 250px;

  &-name {
    @include flex;
    justify-content: space-between;
    align-items: center;
    background-color: $bl-hover;
    border-radius: $vem * 2 $vem * 2 0 0;

    &-language,
    &-copy {
      align-items: center;
    }

    &-copy {
      cursor: pointer;
    }
  }

  &-code {
    display: block;
    span {
      color: $info;
    }
  }
}

.header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 100;
  padding: $vem * 4 $media-width 0;

  &-container {
    margin: 0 auto;
    background-color: $bl;
    @include outline-base($wh, 1px, -1px);
    border-radius: $vem * 6;
    @include flex;
    justify-content: space-between;
    align-items: center;
  }

  &-nav,
  &-logos {
    align-items: center;
  }
}

.feature {
  align-items: center;
  &-icon {
    svg {
      @include icon-base($vem * 12);
      path {
        fill: $wh;
      }
    }
  }
}

// Accordion mixins
@mixin accordion-styles($color) {
  padding-bottom: $vem * 1;
  border-bottom: 1px solid $color;

  .accordion-title {
    width: 100%;
    justify-content: space-between;
    cursor: pointer;
  }
  .accordion-item {
    width: 100%;
    justify-content: flex-start;
  }
  .accordion-items {
    display: grid; 
    grid-template-rows: 0fr;

    div {
      overflow: hidden;
    }
  }
  .accordion-open .accordion-title {
    margin-bottom: $vem * 3;
    color: $ac;
    &:hover {
      color: $ac-hover;
    }
    svg {
      transform: rotate(90deg);
    }
  }
  .accordion-open .accordion-items {
    grid-template-rows: 1fr;
  }
}

// Generate accordion styles for all colors except accent
@each $name, $values in $colors {
  @if $name != 'ac' {
    .accordion-#{$name} {
      @include accordion-styles(list.nth($values, 1));
    }
  }
}