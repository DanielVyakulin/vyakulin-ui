@use 'variables' as *;

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
  transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  text-decoration: none;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

// Typography mixin
@mixin text-style($size, $line-height, $weight) {
  font-size: $size;
  line-height: $line-height;
  font-weight: $weight;
}

// Text styles
.t-h1 { @include text-style($font-size-heading-1, $line-height-heading-1, $font-weight-bold); }
.t-h2 { @include text-style($font-size-heading-2, $line-height-heading-2, $font-weight-semibold); }
.t-h3 { @include text-style($font-size-heading-3, $line-height-heading-3, $font-weight-medium); }
.t-p { @include text-style($font-size-paragraph, $line-height-paragraph, $font-weight-regular); }
.t-sm { @include text-style($font-size-small, $line-height-small, $font-weight-regular); }
.t-btn { @include text-style($font-size-button, $line-height-button, $font-weight-semibold); }

// Link mixin
@mixin link-style($color, $hover-color) {
  color: $color;
  display: inline-flex;
  align-items: center;
  justify-content: center;

  svg {
    width: 1em;
    height: 1em;

    path {
      fill: $color;
    }
  }
  

  &:hover {
    color: $hover-color;  

    svg path {
      fill: $hover-color;
    }
  }
}

.btn {
  cursor: pointer;
  border-radius: $vem;
  display: inline-flex;
  align-items: center;
  justify-content: center;
}

// Button mixin
@mixin button-style($color, $text-color, $hover-color, $hover-text-color) {
  @extend .btn;
  background-color: $color;
  color: $text-color;

  svg {
    width: 1em;
    height: 1em;

    path {
      fill: $text-color;
    }
  }
  
  &:hover {
    background-color: $hover-color;
    color: $hover-text-color; 

    svg path {
      fill: $hover-text-color;
    }
  }
}

// Outline button mixin
@mixin outline-button-style($color, $text-color, $hover-color, $hover-text-color) {
  @extend .btn;
  background-color: transparent;
  color: $text-color;
  outline: $outline-width solid $color;
  outline-offset: $outline-offset;

  svg {
    width: 1em;
    height: 1em;

    path {
      fill: $text-color;
    }
  }
  
  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
    outline-color: $hover-color;

    svg path {
      fill: $hover-text-color;
    }
  }
}

// Link styles
.link-wh { @include link-style($wh, $wh-hover); }
.link-wh-ac { @include link-style($wh, $ac); }
.link-bl { @include link-style($bl, $bl-hover); }
.link-bl-ac { @include link-style($bl, $ac); }
.link-ac { @include link-style($ac, $ac-hover); }

// Button styles
.btn-wh { @include button-style($wh, $bl, $wh-hover, $bl-hover); }
.btn-wh-ac { @include button-style($wh, $bl, $ac, $bl); }
.btn-bl { @include button-style($bl, $wh, $bl-hover, $wh-hover); }
.btn-bl-ac { @include button-style($bl, $wh, $ac, $bl); }
.btn-ac { @include button-style($ac, $bl, $ac-hover, $bl-hover); }

// Outline button styles
.btn-outline-wh { @include outline-button-style($wh, $wh, $wh, $bl); }
.btn-outline-wh-ac { @include outline-button-style($wh, $wh, $ac, $bl); }
.btn-outline-bl { @include outline-button-style($bl, $bl, $bl, $wh); }
.btn-outline-bl-ac { @include outline-button-style($bl, $bl, $ac, $bl); }
.btn-outline-ac { @include outline-button-style($ac, $ac, $ac, $bl); }


.text-input {
  padding: $vem * 2 $vem * 2 $vem;
  border-radius: $vem;
  display: inline-flex;
  align-items: center;
}

// Text input mixin
@mixin text-input-style($color, $text-color, $hover-color, $hover-text-color) {
  background-color: $color;
  color: $text-color;
  @extend .text-input;
  outline: none;
  border: none;
  width: 100%;
  position: relative;

  &::placeholder {
    color: transparent;
  }

  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
  }

  &:focus {
    background-color: $ac;
    color: $bl;
  }
}

// Outline text input mixin
@mixin outline-text-input-style($color, $text-color, $hover-color, $hover-text-color) {
  background-color: transparent;
  color: $text-color;
  @extend .text-input;
  border: $outline-width solid $color;
  width: 100%;
  position: relative;

  &::placeholder {
    color: transparent;
  }

  &:hover {
    background-color: $hover-color;
    color: $hover-text-color;
    border-color: $hover-color;
  }

  &:focus {
    background-color: $ac;
    color: $bl;
    border-color: $ac;
    outline: none;
  }
}

// Text input container
.input-container {
  position: relative;
  width: 100%;
  margin-top: $vem * 3;
  input {
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    font-weight: inherit;
  }
}

// Text input label
.input-label {
  position: absolute;
  left: $vem;
  top: 50%;
  transform: translateY(-50%);
  color: inherit;
  pointer-events: none;
  transition: all 0.3s ease;
}

// Input label states mixin
@mixin input-label-states($color, $hover-color, $focus-color, $filled-color) {
  ~ .input-label {
    color: $color;
  }

  &:hover ~ .input-label {
    color: $hover-color;
  }

  &:focus ~ .input-label {
    left: -$vem;
    top: -$vem * 3;
    color: $focus-color;
  }

  &:not(:placeholder-shown):not(:focus) ~ .input-label {
    left: -$vem;
    top: -$vem * 3;
    color: $filled-color;
  }
}

// Input label states
.input-wh { @include input-label-states($bl, $bl-hover, $ac, $wh); }
.input-bl { @include input-label-states($wh, $wh-hover, $ac, $bl); }
.input-outline-wh { @include input-label-states($wh, $bl, $ac, $wh); }
.input-outline-bl { @include input-label-states($bl, $wh, $ac, $bl); }

// Text input styles
.input-wh { @include text-input-style($wh, $bl, $wh-hover, $bl-hover); }
.input-bl { @include text-input-style($bl, $wh, $bl-hover, $wh-hover); }
.input-outline-wh { @include outline-text-input-style($wh, $wh, $wh, $bl); }
.input-outline-bl { @include outline-text-input-style($bl, $bl, $bl, $wh); }

.header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 100;
  padding-left: $media-width;
  padding-right: $media-width;
  padding-top: $vem * 4;

  &-container {
    margin: 0 auto;
    background-color: $bl;
    outline: 1px solid $wh;
    outline-offset: -1px;
    border-radius: $vem*6;
    justify-content: space-between;
    align-items: center;
  }

  &-nav {
    align-items: center;
  }

  &-logos {
    align-items: center;
  }
}

.all {
  margin-top: $vem * 20;
  padding-left: $media-width;
  padding-right: $media-width;
}

.breadcrumb {
  align-items: center;
}

.snip {
  background-color: $bl;
  border: 1px solid $wh;
  border-radius: $vem * 2;
  min-width: 250px;

  &-name {
    justify-content: space-between;
    align-items: center;
    background-color: $bl-hover;
    border-top-left-radius: $vem * 2;
    border-top-right-radius: $vem * 2;

    &-language {
      align-items: center;
    }

    &-copy {
      align-items: center;
      cursor: pointer;
    }
  }

  &-code {
    display: block;
    span {
      color: $info;
    }
  }
}

.feature {
  align-items: center;
  &-icon {
    svg {
      width: $vem * 12;
      height: $vem * 12;
    }
    path {
      fill: $wh;
    }
  }
}

// Flexbox direction classes
.ch {
  display: flex;
  flex-direction: row;
}

.cv {
  display: flex;
  flex-direction: column;
}

// Gap classes
@for $i from 1 through 12 {
  .gap-#{$i} {
    gap: $vem * $i;
  }
}

// Padding horizontal classes
@for $i from 1 through 12 {
  .ph-#{$i} {
    padding-right: $vem * $i;
    padding-left: $vem * $i;
  }
}

// Padding vertical classes
@for $i from 1 through 12 {
  .pv-#{$i} {
    padding-top: $vem * $i;
    padding-bottom: $vem * $i;
  }
}